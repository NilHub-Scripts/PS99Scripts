local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local plr = Players.LocalPlayer

-- Create the window
local Window = Rayfield:CreateWindow({
    Name = "Nil Scripts || Pet Simulator 99 üê∂",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "Please wait...",
    ConfigurationSaving = {
        Enabled = false,
    },
    Discord = {
        Enabled = false,
    },
    KeySystem = false,
    Theme = Rayfield.Themes.Dark,
})

-- Main Tab
local MainTab = Window:CreateTab("Main", 4483362458)
MainTab:CreateSection("Basic Tools")

MainTab:CreateSlider({
    Name = "Walkspeed",
    Range = {16, 160},
    Increment = 1,
    CurrentValue = 16,
    Callback = function(Value)
        if plr.Character and plr.Character:FindFirstChild("Humanoid") then
            plr.Character.Humanoid.WalkSpeed = Value
        end
    end,
})

-- Gems Generator Tab
local GemsTab = Window:CreateTab("Gems Generator", 4483362458)
GemsTab:CreateSection("Generate Gems")

local InputBox
local TargetAmountLabel = plr:WaitForChild("PlayerGui"):WaitForChild("BucksIndicatorApp")
    :WaitForChild("CurrencyIndicator"):WaitForChild("Container"):WaitForChild("Amount")

local function FormatNumber(n)
    local s = tostring(n)
    local formatted = s:reverse():gsub("(%d%d%d)", "%1,"):reverse()
    if formatted:sub(1, 1) == "," then
        formatted = formatted:sub(2)
    end
    return formatted
end

local function AnimateGemUpdate(amount)
    local current = tonumber(TargetAmountLabel.Text:gsub(",", "")) or 0
    local target = current + amount
    local steps = 30
    local increment = (target - current) / steps

    for i = 1, steps do
        local val = math.floor(current + increment * i)
        TargetAmountLabel.Text = FormatNumber(val)
        wait(0.03)
    end
    TargetAmountLabel.Text = FormatNumber(target)
end

InputBox = GemsTab:CreateInput({
    Name = "Gem Amount",
    PlaceholderText = "Enter amount of gems",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        -- Optional input check can go here
    end,
})

GemsTab:CreateButton({
    Name = "Generate Gems",
    Callback = function()
        local val = tonumber(InputBox.Value)
        if val then
            AnimateGemUpdate(val)
            Rayfield:Notify({
                Title = "Success",
                Content = "Gems generated!",
                Duration = 2,
            })
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Please enter a valid number.",
                Duration = 2,
            })
        end
    end,
})
